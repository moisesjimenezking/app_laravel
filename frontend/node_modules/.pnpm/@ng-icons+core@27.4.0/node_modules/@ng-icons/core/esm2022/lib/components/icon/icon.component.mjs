import { ChangeDetectionStrategy, Component, ElementRef, inject, Injector, Input, runInInjectionContext, } from '@angular/core';
import { injectNgIconPostProcessor, injectNgIconPreProcessor, } from '../../providers/features/csp';
import { injectNgIconConfig } from '../../providers/icon-config.provider';
import { injectNgIconLoader, injectNgIconLoaderCache, } from '../../providers/icon-loader.provider';
import { injectNgIcons } from '../../providers/icon.provider';
import { coerceLoaderResult } from '../../utils/async';
import { coerceCssPixelValue } from '../../utils/coercion';
import { toPropertyName } from '../../utils/format';
import { injectLogger } from '../../providers/features/logger';
import * as i0 from "@angular/core";
export class NgIcon {
    constructor() {
        /** Access the global icon config */
        this.config = injectNgIconConfig();
        /** Access the icons */
        this.icons = injectNgIcons();
        /** Access the icon loader if defined */
        this.loader = injectNgIconLoader();
        /** Access the icon cache if defined */
        this.cache = injectNgIconLoaderCache();
        /** Access the pre-processor */
        this.preProcessor = injectNgIconPreProcessor();
        /** Access the post-processor */
        this.postProcessor = injectNgIconPostProcessor();
        /** Access the injector */
        this.injector = inject(Injector);
        /** Access the element ref */
        this.elementRef = inject(ElementRef);
        /** Access the logger */
        this.logger = injectLogger();
        /** Define the size of the icon */
        this.size = this.config.size;
        /** Define the color of the icon */
        this.color = this.config.color;
    }
    /** Define the name of the icon to display */
    set name(name) {
        this.setIcon(name);
    }
    /** Define the svg of the icon to display */
    set svg(svg) {
        this.setSvg(svg);
    }
    ngOnChanges(changes) {
        if (changes.size) {
            this.setIconSize();
        }
        if (changes.color) {
            this.setIconColor();
        }
        if (changes.strokeWidth) {
            this.setIconStrokeWidth();
        }
    }
    ngOnInit() {
        this.setIconStyles();
    }
    setIconColor() {
        this.elementRef.nativeElement.style.removeProperty('color');
        if (this.color !== undefined) {
            this.elementRef.nativeElement.style.setProperty('color', this.color);
        }
    }
    setIconSize() {
        this.elementRef.nativeElement.style.removeProperty('--ng-icon__size');
        if (this.size !== undefined) {
            this.elementRef.nativeElement.style.setProperty('--ng-icon__size', this.size.toString());
        }
    }
    setIconStrokeWidth() {
        this.elementRef.nativeElement.style.removeProperty('--ng-icon__stroke-width');
        if (this.strokeWidth !== undefined) {
            this.elementRef.nativeElement.style.setProperty('--ng-icon__stroke-width', this.strokeWidth.toString());
        }
    }
    /**
     * Set the styles for the icon. We use the style property to set the styles
     * rather than the host binding as it works with CSP.
     */
    setIconStyles() {
        this.setIconColor();
        this.setIconSize();
        this.setIconStrokeWidth();
    }
    setSvg(svg) {
        this.elementRef.nativeElement.innerHTML = this.preProcessor(svg);
        this.postProcessor(this.elementRef.nativeElement);
    }
    /**
     * Load the icon with the given name and insert it into the template.
     * @param name The name of the icon to load.
     */
    async setIcon(name) {
        const propertyName = toPropertyName(name);
        for (const icons of [...this.icons].reverse()) {
            if (icons[propertyName]) {
                // insert the SVG into the template
                this.setSvg(icons[propertyName]);
                return;
            }
        }
        // if there is a loader defined, use it to load the icon
        if (this.loader) {
            const result = await this.requestIconFromLoader(name);
            // if the result is a string, insert the SVG into the template
            if (result !== null) {
                this.setSvg(result);
                return;
            }
        }
        // if there is no icon with this name warn the user as they probably forgot to import it
        this.logger.warn(`No icon named ${name} was found. You may need to import it using the withIcons function.`);
    }
    /**
     * Request the icon from the loader.
     * @param name The name of the icon to load.
     * @returns The SVG content for a given icon name.
     */
    requestIconFromLoader(name) {
        return new Promise(resolve => {
            runInInjectionContext(this.injector, async () => {
                // if we have a cache, check if the icon is already loaded (i.e, it is a string)
                if (this.cache) {
                    const cachedResult = this.cache.get(name);
                    if (typeof cachedResult === 'string') {
                        resolve(cachedResult);
                        return;
                    }
                    // it may be a promise, so we need to await it
                    if (cachedResult instanceof Promise) {
                        const result = await cachedResult;
                        resolve(result);
                        return;
                    }
                }
                const promise = coerceLoaderResult(this.loader(name));
                // store the promise in the cache so if we get repeated calls (e.g. in a loop) before the loader has resolved
                // then don't call the loader function multiple times
                this.cache?.set(name, promise);
                // await the result of the promise
                const result = await promise;
                // if we have a cache, store the result
                this.cache?.set(name, result);
                resolve(result);
            });
        });
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.5", ngImport: i0, type: NgIcon, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "16.1.0", version: "17.3.5", type: NgIcon, isStandalone: true, selector: "ng-icon", inputs: { name: "name", svg: "svg", size: ["size", "size", coerceCssPixelValue], strokeWidth: "strokeWidth", color: "color" }, usesOnChanges: true, ngImport: i0, template: '', isInline: true, styles: [":host{display:inline-block;width:var(--ng-icon__size);height:var(--ng-icon__size);overflow:hidden}\n"], changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.5", ngImport: i0, type: NgIcon, decorators: [{
            type: Component,
            args: [{ selector: 'ng-icon', template: '', standalone: true, changeDetection: ChangeDetectionStrategy.OnPush, styles: [":host{display:inline-block;width:var(--ng-icon__size);height:var(--ng-icon__size);overflow:hidden}\n"] }]
        }], propDecorators: { name: [{
                type: Input
            }], svg: [{
                type: Input
            }], size: [{
                type: Input,
                args: [{ transform: coerceCssPixelValue }]
            }], strokeWidth: [{
                type: Input
            }], color: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,