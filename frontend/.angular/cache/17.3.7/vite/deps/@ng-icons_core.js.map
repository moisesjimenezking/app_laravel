{
  "version": 3,
  "sources": ["../../../../../node_modules/.pnpm/@ng-icons+core@27.4.0/node_modules/@ng-icons/core/fesm2022/ng-icons-core.mjs"],
  "sourcesContent": ["import * as i0 from '@angular/core';\nimport { InjectionToken, inject, makeEnvironmentProviders, numberAttribute, booleanAttribute, Component, ChangeDetectionStrategy, HostBinding, Input, Optional, SkipSelf, Injector, ElementRef, runInInjectionContext, NgModule, Inject } from '@angular/core';\nimport { isObservable, firstValueFrom } from 'rxjs';\nconst NgGlyphConfigToken = new InjectionToken('Ng Glyph Config');\nconst defaultConfig$1 = {\n  size: '1em',\n  opticalSize: 20,\n  weight: 400,\n  grade: 0,\n  fill: false\n};\n/**\n * Provide the configuration for the glyph\n * @param config The configuration to use\n */\nfunction provideNgGlyphsConfig(config) {\n  return {\n    provide: NgGlyphConfigToken,\n    useValue: {\n      ...defaultConfig$1,\n      ...config\n    }\n  };\n}\n/**\n * Inject the configuration for the glyphs\n * @returns The configuration to use\n * @internal\n */\nfunction injectNgGlyphsConfig() {\n  return inject(NgGlyphConfigToken, {\n    optional: true\n  }) ?? defaultConfig$1;\n}\nconst NgGlyphsToken = new InjectionToken('NgGlyphsToken');\nfunction provideNgGlyphs(...glyphsets) {\n  // if there are no glyphsets, throw an error\n  if (!glyphsets.length) {\n    throw new Error('Please provide at least one glyphset.');\n  }\n  // the default glyphset is the first one\n  const defaultGlyphset = glyphsets[0].name;\n  return makeEnvironmentProviders([{\n    provide: NgGlyphsToken,\n    useValue: {\n      defaultGlyphset,\n      glyphsets\n    }\n  }]);\n}\nfunction injectNgGlyphs() {\n  const glyphs = inject(NgGlyphsToken, {\n    optional: true\n  });\n  if (!glyphs) {\n    throw new Error('Please provide the glyphs using the provideNgGlyphs() function.');\n  }\n  return glyphs;\n}\nfunction coerceCssPixelValue(value) {\n  return value == null ? '' : /^\\d+$/.test(value) ? `${value}px` : value;\n}\nclass NgGlyph {\n  constructor() {\n    /**\n     * Access the available glyphsets\n     */\n    this.glyphsets = injectNgGlyphs();\n    /**\n     * Access the default configuration\n     */\n    this.config = injectNgGlyphsConfig();\n    /**\n     * Define the glyphset to use\n     */\n    this.glyphset = this.glyphsets.defaultGlyphset;\n    /**\n     * Define the optical size of the glyph\n     */\n    this.opticalSize = this.config.opticalSize;\n    /**\n     * Define the weight of the glyph\n     */\n    this.weight = this.config.weight;\n    /**\n     * Define the grade of the glyph\n     */\n    this.grade = this.config.grade;\n    /**\n     * Define the fill of the glyph\n     */\n    this.fill = this.config.fill;\n    /**\n     * Define the size of the glyph\n     */\n    this.size = this.config.size;\n    /**\n     * Define the color of the glyph\n     */\n    this.color = this.config.color;\n  }\n  /**\n   * Derive the glyphset class from the glyphset name\n   */\n  get glyphsetClass() {\n    const glyphset = this.glyphsets.glyphsets.find(glyphset => glyphset.name === this.glyphset);\n    if (!glyphset) {\n      throw new Error(`The glyphset \"${this.glyphset}\" does not exist. Please provide a valid glyphset.`);\n    }\n    return glyphset.baseClass;\n  }\n  /**\n   * Define the font variation settings of the glyph\n   */\n  get fontVariationSettings() {\n    return `'FILL' ${this.fill ? 1 : 0}, 'wght' ${this.weight}, 'GRAD' ${this.grade}, 'opsz' ${this.opticalSize}`;\n  }\n  static {\n    this.ɵfac = function NgGlyph_Factory(t) {\n      return new (t || NgGlyph)();\n    };\n  }\n  static {\n    this.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n      type: NgGlyph,\n      selectors: [[\"ng-glyph\"]],\n      hostVars: 9,\n      hostBindings: function NgGlyph_HostBindings(rf, ctx) {\n        if (rf & 2) {\n          i0.ɵɵhostProperty(\"textContent\", ctx.name);\n          i0.ɵɵclassMap(ctx.glyphsetClass);\n          i0.ɵɵstyleProp(\"--ng-glyph__size\", ctx.size)(\"color\", ctx.color)(\"font-variation-settings\", ctx.fontVariationSettings);\n        }\n      },\n      inputs: {\n        name: \"name\",\n        glyphset: \"glyphset\",\n        opticalSize: [i0.ɵɵInputFlags.HasDecoratorInputTransform, \"opticalSize\", \"opticalSize\", numberAttribute],\n        weight: [i0.ɵɵInputFlags.HasDecoratorInputTransform, \"weight\", \"weight\", numberAttribute],\n        grade: [i0.ɵɵInputFlags.HasDecoratorInputTransform, \"grade\", \"grade\", numberAttribute],\n        fill: [i0.ɵɵInputFlags.HasDecoratorInputTransform, \"fill\", \"fill\", booleanAttribute],\n        size: [i0.ɵɵInputFlags.HasDecoratorInputTransform, \"size\", \"size\", coerceCssPixelValue],\n        color: \"color\"\n      },\n      standalone: true,\n      features: [i0.ɵɵInputTransformsFeature, i0.ɵɵStandaloneFeature],\n      decls: 0,\n      vars: 0,\n      template: function NgGlyph_Template(rf, ctx) {},\n      styles: [\"[_nghost-%COMP%]{display:inline-block;width:var(--ng-glyph__size);height:var(--ng-glyph__size);font-size:var(--ng-glyph__size);overflow:hidden}\"],\n      changeDetection: 0\n    });\n  }\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(NgGlyph, [{\n    type: Component,\n    args: [{\n      selector: 'ng-glyph',\n      standalone: true,\n      template: ``,\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      styles: [\":host{display:inline-block;width:var(--ng-glyph__size);height:var(--ng-glyph__size);font-size:var(--ng-glyph__size);overflow:hidden}\\n\"]\n    }]\n  }], null, {\n    name: [{\n      type: HostBinding,\n      args: ['textContent']\n    }, {\n      type: Input,\n      args: [{\n        required: true\n      }]\n    }],\n    glyphset: [{\n      type: Input\n    }],\n    opticalSize: [{\n      type: Input,\n      args: [{\n        transform: numberAttribute\n      }]\n    }],\n    weight: [{\n      type: Input,\n      args: [{\n        transform: numberAttribute\n      }]\n    }],\n    grade: [{\n      type: Input,\n      args: [{\n        transform: numberAttribute\n      }]\n    }],\n    fill: [{\n      type: Input,\n      args: [{\n        transform: booleanAttribute\n      }]\n    }],\n    size: [{\n      type: HostBinding,\n      args: ['style.--ng-glyph__size']\n    }, {\n      type: Input,\n      args: [{\n        transform: coerceCssPixelValue\n      }]\n    }],\n    color: [{\n      type: HostBinding,\n      args: ['style.color']\n    }, {\n      type: Input\n    }],\n    glyphsetClass: [{\n      type: HostBinding,\n      args: ['class']\n    }],\n    fontVariationSettings: [{\n      type: HostBinding,\n      args: ['style.font-variation-settings']\n    }]\n  });\n})();\n\n/**\n * Helper function to create an object that represents a feature.\n */\nfunction createFeature(kind, providers) {\n  return {\n    ɵkind: kind,\n    ɵproviders: providers\n  };\n}\nconst NgIconPreProcessorToken = new InjectionToken('Ng Icon Pre Processor');\nconst NgIconPostProcessorToken = new InjectionToken('Ng Icon Post Processor');\nfunction injectNgIconPreProcessor() {\n  return inject(NgIconPreProcessorToken, {\n    optional: true\n  }) ?? (icon => icon);\n}\nfunction injectNgIconPostProcessor() {\n  return inject(NgIconPostProcessorToken, {\n    optional: true\n  }) ?? (() => {});\n}\nfunction preprocessIcon(icon) {\n  // rename all style attributes to data-style to avoid being blocked by the CSP\n  return icon.replace(/style\\s*=/g, 'data-style=');\n}\nfunction postprocessIcon(element) {\n  // find all elements with a data-style attribute and get the styles from it\n  // and apply them to the element using the style property and remove the data-style attribute\n  const elements = element.querySelectorAll('[data-style]');\n  for (const element of Array.from(elements)) {\n    const styles = element.getAttribute('data-style');\n    styles?.split(';').forEach(style => {\n      const [property, value] = style.split(':');\n      element.style[property.trim()] = value.trim();\n    });\n    element.removeAttribute('data-style');\n  }\n}\n/**\n * Process icons in a way that is compliant with the content security policy\n */\nfunction withContentSecurityPolicy() {\n  return createFeature(0 /* NgIconFeatureKind.ContentSecurityPolicyFeature */, [{\n    provide: NgIconPreProcessorToken,\n    useValue: preprocessIcon\n  }, {\n    provide: NgIconPostProcessorToken,\n    useValue: postprocessIcon\n  }]);\n}\nconst NgIconConfigToken = new InjectionToken('Ng Icon Config');\nconst defaultConfig = {\n  size: '1em'\n};\n/**\n * Provide the configuration for the icons\n * @param config The configuration to use\n */\nfunction provideNgIconsConfig(config, ...features) {\n  return [{\n    provide: NgIconConfigToken,\n    useValue: {\n      ...defaultConfig,\n      ...config\n    }\n  }, features.map(feature => feature.ɵproviders)];\n}\n/**\n * Inject the configuration for the icons\n * @returns The configuration to use\n * @internal\n */\nfunction injectNgIconConfig() {\n  return inject(NgIconConfigToken, {\n    optional: true\n  }) ?? defaultConfig;\n}\nconst NgIconLoaderToken = new InjectionToken('Ng Icon Loader Token');\n/**\n * Helper function to create an object that represents a Loader feature.\n */\nfunction loaderFeature(kind, providers) {\n  return {\n    kind: kind,\n    providers: providers\n  };\n}\nconst NgIconCacheToken = new InjectionToken('Ng Icon Cache Token');\n/**\n * Add caching to the loader. This will prevent the loader from being called multiple times for the same icon name.\n */\nfunction withCaching() {\n  return loaderFeature(0 /* NgIconLoaderFeatureKind.CachingFeature */, [{\n    provide: NgIconCacheToken,\n    useValue: new Map()\n  }]);\n}\n/**\n * Provide a function that will return the SVG content for a given icon name.\n * @param loader The function that will return the SVG content for a given icon name.\n * @param features The list of features to apply to the loader.\n * @returns The SVG content for a given icon name.\n */\nfunction provideNgIconLoader(loader, ...features) {\n  return [{\n    provide: NgIconLoaderToken,\n    useValue: loader\n  }, features.map(feature => feature.providers)];\n}\n/**\n * Inject the function that will return the SVG content for a given icon name.\n */\nfunction injectNgIconLoader() {\n  return inject(NgIconLoaderToken, {\n    optional: true\n  });\n}\n/**\n * Inject the cache that will store the SVG content for a given icon name.\n */\nfunction injectNgIconLoaderCache() {\n  return inject(NgIconCacheToken, {\n    optional: true\n  });\n}\n\n/**\n * Define the icons to use\n * @param icons The icons to provide\n */\nfunction provideIcons(icons) {\n  return [{\n    provide: NgIconsToken,\n    useFactory: parentIcons => ({\n      ...parentIcons?.reduce((acc, icons) => ({\n        ...acc,\n        ...icons\n      }), {}),\n      ...icons\n    }),\n    deps: [[NgIconsToken, new Optional(), new SkipSelf()]],\n    multi: true\n  }];\n}\nconst NgIconsToken = new InjectionToken('Icons Token');\n/**\n * Inject the icons to use\n * @returns The icons to use\n * @internal\n */\nfunction injectNgIcons() {\n  return inject(NgIconsToken, {\n    optional: true\n  }) ?? [];\n}\n\n/**\n * A loader may return a promise, an observable or a string. This function will coerce the result into a promise.\n * @returns\n */\nfunction coerceLoaderResult(result) {\n  if (typeof result === 'string') {\n    return Promise.resolve(result);\n  }\n  if (isObservable(result)) {\n    return firstValueFrom(result);\n  }\n  return result;\n}\n\n/**\n * Hyphenated to lowerCamelCase\n */\nfunction toPropertyName(str) {\n  return str.replace(/([^a-zA-Z0-9])+(.)?/g, (_, __, chr) => chr ? chr.toUpperCase() : '').replace(/[^a-zA-Z\\d]/g, '').replace(/^([A-Z])/, m => m.toLowerCase());\n}\nconst LoggerToken = new InjectionToken('Ng Icon Logger');\n/**\n * The default logger implementation that logs to the console\n */\nclass DefaultLogger {\n  log(message) {\n    console.log(message);\n  }\n  warn(message) {\n    console.warn(message);\n  }\n  error(message) {\n    console.error(message);\n  }\n}\n/**\n * A logger implementation that throws an error on warnings and errors\n */\nclass ExceptionLogger {\n  log(message) {\n    console.log(message);\n  }\n  warn(message) {\n    throw new Error(message);\n  }\n  error(message) {\n    throw new Error(message);\n  }\n}\nfunction injectLogger() {\n  return inject(LoggerToken, {\n    optional: true\n  }) ?? new DefaultLogger();\n}\n/**\n * Throw exceptions on warnings and errors\n */\nfunction withExceptionLogger() {\n  return createFeature(1 /* NgIconFeatureKind.ExceptionLoggerFeature */, [{\n    provide: LoggerToken,\n    useClass: ExceptionLogger\n  }]);\n}\nclass NgIcon {\n  constructor() {\n    /** Access the global icon config */\n    this.config = injectNgIconConfig();\n    /** Access the icons */\n    this.icons = injectNgIcons();\n    /** Access the icon loader if defined */\n    this.loader = injectNgIconLoader();\n    /** Access the icon cache if defined */\n    this.cache = injectNgIconLoaderCache();\n    /** Access the pre-processor */\n    this.preProcessor = injectNgIconPreProcessor();\n    /** Access the post-processor */\n    this.postProcessor = injectNgIconPostProcessor();\n    /** Access the injector */\n    this.injector = inject(Injector);\n    /** Access the element ref */\n    this.elementRef = inject(ElementRef);\n    /** Access the logger */\n    this.logger = injectLogger();\n    /** Define the size of the icon */\n    this.size = this.config.size;\n    /** Define the color of the icon */\n    this.color = this.config.color;\n  }\n  /** Define the name of the icon to display */\n  set name(name) {\n    this.setIcon(name);\n  }\n  /** Define the svg of the icon to display */\n  set svg(svg) {\n    this.setSvg(svg);\n  }\n  ngOnChanges(changes) {\n    if (changes.size) {\n      this.setIconSize();\n    }\n    if (changes.color) {\n      this.setIconColor();\n    }\n    if (changes.strokeWidth) {\n      this.setIconStrokeWidth();\n    }\n  }\n  ngOnInit() {\n    this.setIconStyles();\n  }\n  setIconColor() {\n    this.elementRef.nativeElement.style.removeProperty('color');\n    if (this.color !== undefined) {\n      this.elementRef.nativeElement.style.setProperty('color', this.color);\n    }\n  }\n  setIconSize() {\n    this.elementRef.nativeElement.style.removeProperty('--ng-icon__size');\n    if (this.size !== undefined) {\n      this.elementRef.nativeElement.style.setProperty('--ng-icon__size', this.size.toString());\n    }\n  }\n  setIconStrokeWidth() {\n    this.elementRef.nativeElement.style.removeProperty('--ng-icon__stroke-width');\n    if (this.strokeWidth !== undefined) {\n      this.elementRef.nativeElement.style.setProperty('--ng-icon__stroke-width', this.strokeWidth.toString());\n    }\n  }\n  /**\n   * Set the styles for the icon. We use the style property to set the styles\n   * rather than the host binding as it works with CSP.\n   */\n  setIconStyles() {\n    this.setIconColor();\n    this.setIconSize();\n    this.setIconStrokeWidth();\n  }\n  setSvg(svg) {\n    this.elementRef.nativeElement.innerHTML = this.preProcessor(svg);\n    this.postProcessor(this.elementRef.nativeElement);\n  }\n  /**\n   * Load the icon with the given name and insert it into the template.\n   * @param name The name of the icon to load.\n   */\n  async setIcon(name) {\n    const propertyName = toPropertyName(name);\n    for (const icons of [...this.icons].reverse()) {\n      if (icons[propertyName]) {\n        // insert the SVG into the template\n        this.setSvg(icons[propertyName]);\n        return;\n      }\n    }\n    // if there is a loader defined, use it to load the icon\n    if (this.loader) {\n      const result = await this.requestIconFromLoader(name);\n      // if the result is a string, insert the SVG into the template\n      if (result !== null) {\n        this.setSvg(result);\n        return;\n      }\n    }\n    // if there is no icon with this name warn the user as they probably forgot to import it\n    this.logger.warn(`No icon named ${name} was found. You may need to import it using the withIcons function.`);\n  }\n  /**\n   * Request the icon from the loader.\n   * @param name The name of the icon to load.\n   * @returns The SVG content for a given icon name.\n   */\n  requestIconFromLoader(name) {\n    return new Promise(resolve => {\n      runInInjectionContext(this.injector, async () => {\n        // if we have a cache, check if the icon is already loaded (i.e, it is a string)\n        if (this.cache) {\n          const cachedResult = this.cache.get(name);\n          if (typeof cachedResult === 'string') {\n            resolve(cachedResult);\n            return;\n          }\n          // it may be a promise, so we need to await it\n          if (cachedResult instanceof Promise) {\n            const result = await cachedResult;\n            resolve(result);\n            return;\n          }\n        }\n        const promise = coerceLoaderResult(this.loader(name));\n        // store the promise in the cache so if we get repeated calls (e.g. in a loop) before the loader has resolved\n        // then don't call the loader function multiple times\n        this.cache?.set(name, promise);\n        // await the result of the promise\n        const result = await promise;\n        // if we have a cache, store the result\n        this.cache?.set(name, result);\n        resolve(result);\n      });\n    });\n  }\n  static {\n    this.ɵfac = function NgIcon_Factory(t) {\n      return new (t || NgIcon)();\n    };\n  }\n  static {\n    this.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n      type: NgIcon,\n      selectors: [[\"ng-icon\"]],\n      inputs: {\n        name: \"name\",\n        svg: \"svg\",\n        size: [i0.ɵɵInputFlags.HasDecoratorInputTransform, \"size\", \"size\", coerceCssPixelValue],\n        strokeWidth: \"strokeWidth\",\n        color: \"color\"\n      },\n      standalone: true,\n      features: [i0.ɵɵInputTransformsFeature, i0.ɵɵNgOnChangesFeature, i0.ɵɵStandaloneFeature],\n      decls: 0,\n      vars: 0,\n      template: function NgIcon_Template(rf, ctx) {},\n      styles: [\"[_nghost-%COMP%]{display:inline-block;width:var(--ng-icon__size);height:var(--ng-icon__size);overflow:hidden}\"],\n      changeDetection: 0\n    });\n  }\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(NgIcon, [{\n    type: Component,\n    args: [{\n      selector: 'ng-icon',\n      template: '',\n      standalone: true,\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      styles: [\":host{display:inline-block;width:var(--ng-icon__size);height:var(--ng-icon__size);overflow:hidden}\\n\"]\n    }]\n  }], null, {\n    name: [{\n      type: Input\n    }],\n    svg: [{\n      type: Input\n    }],\n    size: [{\n      type: Input,\n      args: [{\n        transform: coerceCssPixelValue\n      }]\n    }],\n    strokeWidth: [{\n      type: Input\n    }],\n    color: [{\n      type: Input\n    }]\n  });\n})();\nclass NgIconsModule {\n  constructor(icons) {\n    if (Object.keys(icons).length === 0) {\n      throw new Error('No icons have been provided. Ensure to include some icons by importing them using NgIconsModule.withIcons({ ... }).');\n    }\n  }\n  /**\n   * Define the icons that will be included in the application. This allows unused icons to\n   * be tree-shaken away to reduce bundle size\n   * @param icons The object containing the required icons\n   */\n  static withIcons(icons) {\n    return {\n      ngModule: NgIconsModule,\n      providers: provideIcons(icons)\n    };\n  }\n  static {\n    this.ɵfac = function NgIconsModule_Factory(t) {\n      return new (t || NgIconsModule)(i0.ɵɵinject(NgIconsToken));\n    };\n  }\n  static {\n    this.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n      type: NgIconsModule,\n      imports: [NgIcon],\n      exports: [NgIcon]\n    });\n  }\n  static {\n    this.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({});\n  }\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(NgIconsModule, [{\n    type: NgModule,\n    args: [{\n      imports: [NgIcon],\n      exports: [NgIcon]\n    }]\n  }], () => [{\n    type: undefined,\n    decorators: [{\n      type: Inject,\n      args: [NgIconsToken]\n    }]\n  }], null);\n})();\nconst NG_ICON_DIRECTIVES = [NgIcon];\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { NG_ICON_DIRECTIVES, NgGlyph, NgGlyphConfigToken, NgIcon, NgIconCacheToken, NgIcon as NgIconComponent, NgIconConfigToken, NgIconLoaderToken, NgIconsModule, NgIconsToken, injectNgGlyphsConfig, injectNgIconConfig, injectNgIconLoader, injectNgIconLoaderCache, injectNgIcons, provideIcons, provideNgGlyphs, provideNgGlyphsConfig, provideNgIconLoader, provideNgIconsConfig, withCaching, withContentSecurityPolicy, withExceptionLogger };\n"],
  "mappings": "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",
  "names": ["glyphset", "element", "icons", "result"]
}
